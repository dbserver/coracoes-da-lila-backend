# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- chore/ci

variables:
  - name: buildId
    value: $(Build.BuildId)
    
  - name: vmImage
    value: ubuntu-latest

  - name: k8sNamespace
    value: coracoesdalila

  - name: connectionType
    value: Kubernetes Service Connection

  - name: acrServiceConnection
    value: "docker-registry"

  - name: aksServiceConnection
    value: "AKS-DBSERVER"

  - name: dockerRepository
    value: "coracoesdalila/backend"

  - name: imagePullSecrets
    value: stt-api-image-pull-secret
    
  - group: coracoesdalila-api-envs

pool:
  vmImage: $(vmImage)

jobs:
  - job: CI
    displayName: Build and Push

    steps:

    - task: Maven@4
      inputs:
        mavenPomFile: './pom.xml'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.17'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
    - task: Docker@2
      inputs:
        containerRegistry: $(acrServiceConnection)
        repository: $(dockerRepository)
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(Build.BuildId)
          latest
  - job: CD
    dependsOn: CI
    displayName: Deployment
    steps:
      - task: Docker@0
        displayName: 'Pull docker image'
        inputs:
          containerregistrytype: 'Container Registry'
          dockerRegistryConnection: 'docker-registry'
          action: 'Run a Docker command'
          customCommand: 'docker pull dbserverregistry.azurecr.io/coracoesdalila/backend:latest'
    
      - task: Docker@0
        displayName: 'Retague docker image'
        inputs:
          containerregistrytype: 'Container Registry'
          dockerRegistryConnection: 'docker-registry'
          action: 'Run a Docker command'
          customCommand: 'docker image tag dbserverregistry.azurecr.io/coracoesdalila/backend:latest dbserverregistry.azurecr.io/coracoesdalila/backend:xpto'  

      - task: Docker@0
        displayName: 'Push new image'
        inputs:
          containerregistrytype: 'Container Registry'
          dockerRegistryConnection: 'docker-registry'
          action: 'Run a Docker command'
          customCommand: 'docker image push dbserverregistry.azurecr.io/coracoesdalila/backend:xpto'

      - task: Kubernetes@1
        displayName: Create ConfigMap
        inputs:
          connectionType: $(connectionType)
          kubernetesServiceEndpoint: $(aksServiceConnection)
          namespace: $(k8sNamespace)
          containerRegistryType: "Azure Container Registry"
          configMapName: "coracoesdalila-api-configmap"
          forceUpdateConfigMap: true
          configMapArguments: >
            --from-literal=DATABASE_URL=$(DATABASE_URL)
            --from-literal=DATABASE_USERNAME=$(DATABASE_USERNAME)
            --from-literal=DATABASE_PASSWORD=$(DATABASE_PASSWORD)
      - task: KubernetesManifest@0
        displayName: Deploy to Kubernetes
        inputs:
          action: deploy
          namespace: $(k8sNamespace)
          kubernetesServiceConnection: $(aksServiceConnection)
          manifests: |
            ./kubernetes/deployment.yaml
            ./kubernetes/service.yaml
          # imagePullSecrets: |
          #   $(imagePullSecrets)
          containers: |
            dbserverregistry.azurecr.io/coracoesdalila/backend:$(buildId)      
      - task: Kubernetes@1
        displayName: Apply Ingress
        inputs:
          connectionType: $(connectionType)
          kubernetesServiceEndpoint: $(aksServiceConnection)
          namespace: $(k8sNamespace)
          command: "apply"
          useConfigurationFile: true
          configuration: "./kubernetes/ingress.yaml"
          outputFormat: none
            