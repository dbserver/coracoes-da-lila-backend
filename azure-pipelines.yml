# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- chore/ci

variables:
  - name: buildId
    value: $(Build.BuildId)
    
  - name: vmImage
    value: ubuntu-latest

  - name: k8sNamespace
    value: coracoesdalila

  - name: connectionType
    value: Kubernetes Service Connection

  - name: acrServiceConnection
    value: "ACR-DBLAB"

  - name: aksServiceConnection
    value: "AKS-DB"

  - name: dockerRepository
    value: "stt-api"

  - name: imagePullSecrets
    value: stt-api-image-pull-secret

pool:
  vmImage: $(vmImage)

jobs:
  - job:
    displayName: Build and Push

    steps:

    - task: Maven@4
      inputs:
        mavenPomFile: './pom.xml'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.17'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
    - task: Docker@2
      inputs:
        containerRegistry: 'docker-registry'
        repository: 'coracoesdalila/backend'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(Build.BuildId)
          latest
  - job:
    displayName: Deployment
    steps:
      - task: Kubernetes@1
        displayName: Create ConfigMap
        inputs:
          connectionType: $(connectionType)
          kubernetesServiceEndpoint: $(aksServiceConnection)
          namespace: $(k8sNamespace)
          containerRegistryType: "Azure Container Registry"
          configMapName: "stt-api-configmap"
          forceUpdateConfigMap: true
          configMapArguments: >
            --from-literal=AZURE_KEY=$(AZURE_KEY)
            --from-literal=AZURE_LANGUAGE=$(AZURE_LANGUAGE)
            --from-literal=AZURE_REGION=$(AZURE_REGION)
            --from-literal=PORT=$(PORT)